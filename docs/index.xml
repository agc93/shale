<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on Shale Documentation</title><link>/docs/</link><description>Recent content in Documentation on Shale Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Mar 2024 02:17:43 +1000</lastBuildDate><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/docs/introduction/</link><pubDate>Mon, 04 Mar 2024 02:17:43 +1000</pubDate><guid>/docs/introduction/</guid><description>Shale is a thin but opinionated abstraction layer over Nate McMaster&amp;rsquo;s excellent DotNetCorePlugins. That library is doing all the hard work of loading the assemblies and types, Shale just provides a slightly easier (and in my opinion, friendlier) reusable API for adding plugin support to your own applications.
In short, you can use Shale to quickly and easily add plugin support to your own applications with minimal code changes.
Design linkThe DotNetCorePlugins library is an incredibly useful library that&amp;rsquo;s perfect for dynamically loading code in .</description></item><item><title>Quickstart</title><link>/docs/quickstart/</link><pubDate>Mon, 04 Mar 2024 02:17:43 +1000</pubDate><guid>/docs/quickstart/</guid><description>ðŸ’¡ This is a highly abridged quickstart guide! If you&amp;rsquo;re not familiar with Shale and/or DotNetCorePlugins and/or plugins in .NET applications, we strongly recommend following the detailed walkthrough
Install the package(s) linkShale is provided as two packages to minimise the dependencies needed for your app&amp;rsquo;s plugin authors: Shale and Shale.Abstractions. Like the Microsoft.Extensions.* packages, the .Abstractions package contains only the required interfaces (IPlugin in this case) and references to the dependent interfaces (like IServiceCollection and IConfiguration).</description></item><item><title>Walkthrough</title><link>/docs/walkthrough/</link><pubDate>Mon, 04 Mar 2024 02:17:43 +1000</pubDate><guid>/docs/walkthrough/</guid><description>To properly demonstrate the capabilities of Shale, we&amp;rsquo;ll do a start-to-finish walkthrough of adding plugin support to a .NET application using Shale. So if this seems daunting, just remember you might not need all of these steps, but if you&amp;rsquo;re new to supporting plugins in your apps, you might find my method useful.
If you&amp;rsquo;re going to be distributing an app (let&amp;rsquo;s call it HostApp) and want consumers to be able to install plugins built by someone other than yourself, you&amp;rsquo;re going to want to make it easy to both build and use plugins.</description></item></channel></rss>